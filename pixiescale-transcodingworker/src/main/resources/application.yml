server:
  port: 8083

spring:
  application:
    name: pixiescale-transcodingworker
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: transcodingworker-group
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: com.tenacy.pixiescale.common.event.TranscodingTaskEvent
        compression.type: snappy
        linger.ms: 20
        batch.size: 32768
        buffer.memory: 33554432
        max.in.flight.requests.per.connection: 5
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
        fetch.min.bytes: 1024
        fetch.max.wait.ms: 500
        max.poll.records: 500

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    root: INFO
    com.tenacy.pixiescale: DEBUG

ffmpeg:
  binary-path: ffmpeg
  temp-dir: ${java.io.tmpdir}/pixiescale
  timeout-seconds: 3600
  gpu-acceleration: true
  gpu-device: "0"
  thread-count: 8
  cpu-preset: "faster"
  gpu-preset: "p2"
  buffer-size: 32

storage:
  base-dir: ${java.io.tmpdir}/pixiescale/output

app:
  media:
    source-dir: ${user.home}/pixiescale/media/uploads
  kafka:
    topics:
      transcoding-task: transcoding-task
      task-result: task-result