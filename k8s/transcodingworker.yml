apiVersion: apps/v1
kind: Deployment
metadata:
  name: transcodingworker
  namespace: pixiescale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transcodingworker
  template:
    metadata:
      labels:
        app: transcodingworker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8083"
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox:1.28
          command: ['sh', '-c', 'until nc -z kafka-service 9092; do echo "Waiting for Kafka to be ready..."; sleep 2; done;']
      containers:
        - name: transcodingworker
          image: pixiescale-transcodingworker:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8083
          env:
            - name: JAVA_OPTS
              value: "-Xms512m -Xmx1024m -XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError"
            - name: SPRING_PROFILES_ACTIVE
              valueFrom:
                configMapKeyRef:
                  name: pixiescale-config
                  key: SPRING_PROFILES_ACTIVE
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service:9092"
            - name: APP_KAFKA_TOPICS_TRANSCODING_TASK
              valueFrom:
                configMapKeyRef:
                  name: pixiescale-config
                  key: KAFKA_TOPIC_TRANSCODING_TASK
            - name: APP_KAFKA_TOPICS_TASK_RESULT
              valueFrom:
                configMapKeyRef:
                  name: pixiescale-config
                  key: KAFKA_TOPIC_TASK_RESULT
            - name: STORAGE_BASE_DIR
              value: "/app/media/output"
            - name: APP_MEDIA_SOURCE_DIR
              value: "/app/media/uploads"
            - name: FFMPEG_BINARY_PATH
              value: "ffmpeg"
            - name: FFMPEG_TEMP_DIR
              value: "/app/media/temp"
            - name: FFMPEG_GPU_ACCELERATION
              value: "false"
          resources:
            requests:
              memory: "512Mi"
              cpu: "300m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          volumeMounts:
            - name: media-uploads
              mountPath: /app/media/uploads
              readOnly: true
            - name: media-output
              mountPath: /app/media/output
            - name: media-temp
              mountPath: /app/media/temp
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8083
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 10
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8083
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            failureThreshold: 5
      volumes:
        - name: media-uploads
          persistentVolumeClaim:
            claimName: media-uploads-pvc
        - name: media-output
          persistentVolumeClaim:
            claimName: media-output-pvc
        - name: media-temp
          persistentVolumeClaim:
            claimName: media-temp-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: transcodingworker-service
  namespace: pixiescale
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/actuator/prometheus"
    prometheus.io/port: "8083"
spec:
  selector:
    app: transcodingworker
  ports:
    - port: 8083
      targetPort: 8083
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: transcodingworker-hpa
  namespace: pixiescale
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: transcodingworker
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 60
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 10
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 120