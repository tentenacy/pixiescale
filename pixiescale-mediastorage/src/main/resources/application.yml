server:
  port: 8084

spring:
  application:
    name: pixiescale-mediastorage
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: mediastorage-group
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: com.tenacy.pixiescale.common.event.TranscodingTaskEvent
        compression.type: snappy
        linger.ms: 20
        batch.size: 32768
        buffer.memory: 33554432
        max.in.flight.requests.per.connection: 5
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
        fetch.min.bytes: 1024
        fetch.max.wait.ms: 500
        max.poll.records: 500

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    root: INFO
    com.tenacy.pixiescale: DEBUG

storage:
  type: local
  base-dir: ${user.home}/pixiescale/media/output
  upload-part-size: 5
  max-upload-size: 2000

app:
  kafka:
    topics:
      task-result: task-result
      storage-result: storage-result